-----------------------------------  Question --------------------------------

Given two numbers M and N. The task is to find the position of the rightmost different bit in the binary representation of numbers.

Input: M = 11, N = 9
Output: 2
Explanation: Binary representation of the given 
numbers are: 1011 and 1001, 
2nd bit from right is different.

--------------------------------------------Java---------------------------

public static int posOfRightMostDiffBit(int m, int n)
    {
            
        if(m == n){
            return -1;
        }      
        else{
            int x = m^n;
            return (int)((Math.log(x&(~x+1)))/(Math.log(2)))+1;
        }
            
    }


------------------------------------C++--------------------------------

int posOfRightMostDiffBit(int m, int n)
    {
      if(m == n) {return -1;}
      else {
          int x = m^n;
          return (log2(x&(~x+1)))+1;
      }
    }


------------------------------Python---------------------------------------

def posOfRightMostDiffBit(self,m,n):
        if m == n : return -1
        else:
            x = m ^ n
            return (math.log2(x&(~x+1)))+1